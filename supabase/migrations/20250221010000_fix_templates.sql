-- Verificar e criar colunas necess√°rias
DO $$
BEGIN
  -- Adicionar coluna type se n√£o existir
  IF NOT EXISTS (
    SELECT 1 
    FROM information_schema.columns 
    WHERE table_name = 'notification_templates' 
    AND column_name = 'type'
  ) THEN
    ALTER TABLE notification_templates 
    ADD COLUMN type text CHECK (type IN ('maintenance', 'welcome')) NOT NULL DEFAULT 'maintenance';
  END IF;

  -- Adicionar coluna variables se n√£o existir
  IF NOT EXISTS (
    SELECT 1 
    FROM information_schema.columns 
    WHERE table_name = 'notification_templates' 
    AND column_name = 'variables'
  ) THEN
    ALTER TABLE notification_templates 
    ADD COLUMN variables jsonb;
  END IF;
END $$;

-- Adicionar colunas maintenance_interval e maintenance_price na tabela company_settings
ALTER TABLE company_settings 
ADD COLUMN IF NOT EXISTS maintenance_interval integer DEFAULT 120,
ADD COLUMN IF NOT EXISTS maintenance_price decimal(10,2) DEFAULT 150.00;

-- Adicionar colunas maintenance_template_id e welcome_template_id na tabela company_settings
ALTER TABLE company_settings 
ADD COLUMN IF NOT EXISTS maintenance_template_id uuid REFERENCES notification_templates(id),
ADD COLUMN IF NOT EXISTS welcome_template_id uuid REFERENCES notification_templates(id);

-- Migrar dados de welcome_messages para notification_templates (se a tabela existir)
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'welcome_messages') THEN
    -- Tornar user_id opcional se n√£o existir
    ALTER TABLE notification_templates ALTER COLUMN user_id DROP NOT NULL;

    INSERT INTO notification_templates (
      id, 
      title, 
      content, 
      type, 
      variables, 
      created_at,
      maintenance_interval,
      maintenance_price,
      company_name
    )
    SELECT 
      id,
      title,
      content,
      'welcome' AS type,
      jsonb_build_object(
        'nome_cliente', 'Nome formal do cliente',
        'nome_empresa', 'Nome da empresa'
      ) AS variables,
      created_at,
      120 AS maintenance_interval,
      150.00 AS maintenance_price,
      'Empresa' AS company_name
    FROM welcome_messages
    ON CONFLICT (id) DO NOTHING;
  END IF;
END $$;

-- Atualizar templates existentes
DO $$
BEGIN
  -- Atualizar type para templates existentes
  UPDATE notification_templates 
  SET type = 'welcome'
  WHERE title ILIKE '%boas-vindas%' 
  AND type = 'maintenance';

  -- Atualizar variables para templates existentes
  UPDATE notification_templates 
  SET variables = jsonb_build_object(
    'nome_cliente', 'Nome formal do cliente',
    'dias_instalacao', 'Dias desde o √∫ltimo servi√ßo',
    'tipo_servico', 'Tipo do servi√ßo realizado',
    'preco_manutencao', 'Pre√ßo da manuten√ß√£o',
    'nome_empresa', 'Nome da empresa'
  )
  WHERE variables IS NULL;
END $$;

-- Remover tabela welcome_messages se existir
DROP TABLE IF EXISTS welcome_messages;

-- Atualizar pol√≠ticas RLS para clients
DROP POLICY IF EXISTS "Usu√°rios podem ver seus clientes" ON clients;
DROP POLICY IF EXISTS "Usu√°rios podem gerenciar seus clientes" ON clients;

CREATE POLICY "Todos podem ver clientes"
  ON clients FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Usu√°rios autenticados podem gerenciar clientes"
  ON clients FOR ALL
  TO authenticated
  USING (true)
  WITH CHECK (true);

-- Atualizar pol√≠ticas RLS para company_settings
DROP POLICY IF EXISTS "Todos podem ver configura√ß√µes da empresa" ON company_settings;
DROP POLICY IF EXISTS "Admins podem gerenciar configura√ß√µes da empresa" ON company_settings;

CREATE POLICY "Todos podem ver e atualizar configura√ß√µes b√°sicas"
  ON company_settings
  USING (true)
  WITH CHECK (
    auth.role() = 'authenticated' AND (
      is_admin() OR (
        maintenance_interval IS NOT DISTINCT FROM maintenance_interval AND
        maintenance_price IS NOT DISTINCT FROM maintenance_price
      )
    )
  );

-- Inserir templates de manuten√ß√£o
INSERT INTO notification_templates (
  id,
  title, 
  content, 
  type, 
  variables,
  maintenance_interval,
  maintenance_price,
  company_name,
  created_at
) VALUES
(
  '00000000-0000-0000-0000-000000000001'::uuid,
  'Lembrete de Manuten√ß√£o Padr√£o',
  'üîß Ol√° {nome_cliente}!\n\nJ√° se passaram {dias_instalacao} dias desde {tipo_servico}. Para manter seu equipamento funcionando perfeitamente, que tal agendar uma revis√£o?\n\nValor especial: R$ {preco_manutencao}\n\nAtenciosamente,\n{nome_empresa}',
  'maintenance',
  '{"nome_cliente": "Nome formal do cliente", "dias_instalacao": "Dias desde o √∫ltimo servi√ßo", "tipo_servico": "Tipo do servi√ßo realizado", "preco_manutencao": "Pre√ßo da manuten√ß√£o", "nome_empresa": "Nome da empresa"}',
  120,
  150.00,
  'Empresa',
  NOW()
),
(
  '00000000-0000-0000-0000-000000000002'::uuid,
  'Lembrete de Manuten√ß√£o Preventiva',
  '‚ö° Importante: Manuten√ß√£o Preventiva\n\nOl√° {nome_cliente},\n\nSeu equipamento precisa de cuidados! J√° se passaram {dias_instalacao} dias desde {tipo_servico}.\n\nAgende agora sua manuten√ß√£o por apenas R$ {preco_manutencao} e evite problemas futuros!\n\n{nome_empresa}',
  'maintenance',
  '{"nome_cliente": "Nome formal do cliente", "dias_instalacao": "Dias desde o √∫ltimo servi√ßo", "tipo_servico": "Tipo do servi√ßo realizado", "preco_manutencao": "Pre√ßo da manuten√ß√£o", "nome_empresa": "Nome da empresa"}',
  120,
  150.00,
  'Empresa',
  NOW()
),
(
  '00000000-0000-0000-0000-000000000003'::uuid,
  'Lembrete de Manuten√ß√£o Urgente',
  'üö® Aten√ß√£o {nome_cliente}!\n\nSeu equipamento est√° h√° {dias_instalacao} dias sem {tipo_servico}. Isso pode causar:\n- Maior consumo de energia\n- Problemas t√©cnicos\n- Redu√ß√£o da vida √∫til\n\nAgende j√° sua manuten√ß√£o: R$ {preco_manutencao}\n\n{nome_empresa}',
  'maintenance',
  '{"nome_cliente": "Nome formal do cliente", "dias_instalacao": "Dias desde o √∫ltimo servi√ßo", "tipo_servico": "Tipo do servi√ßo realizado", "preco_manutencao": "Pre√ßo da manuten√ß√£o", "nome_empresa": "Nome da empresa"}',
  120,
  150.00,
  'Empresa',
  NOW()
)
ON CONFLICT (id) DO NOTHING;

-- Inserir templates de boas-vindas
INSERT INTO notification_templates (
  id,
  title, 
  content, 
  type, 
  variables,
  maintenance_interval,
  maintenance_price,
  company_name,
  created_at
) VALUES
(
  '00000000-0000-0000-0000-000000000004'::uuid,
  'Boas-vindas Residencial',
  'üëã Ol√° {nome_cliente}!\n\nSeja bem-vindo ao programa de fidelidade da {nome_empresa}! üåü\n\nAgora voc√™ ter√° acesso a:\n‚úÖ Descontos especiais\n‚úÖ Lembretes de manuten√ß√£o\n‚úÖ Atendimento priorit√°rio\n\nObrigado pela confian√ßa! üíô',
  'welcome',
  '{"nome_cliente": "Nome formal do cliente", "nome_empresa": "Nome da empresa"}',
  120,
  150.00,
  'Empresa',
  NOW()
),
(
  '00000000-0000-0000-0000-000000000005'::uuid,
  'Boas-vindas Comercial',
  'üè¢ Prezado(a) {nome_cliente},\n\n√â com satisfa√ß√£o que damos as boas-vindas √† {nome_empresa}!\n\nComo cliente VIP, voc√™ conta com:\n‚úÖ Manuten√ß√£o programada\n‚úÖ Pre√ßos diferenciados\n‚úÖ Suporte priorit√°rio\n\nContamos com sua parceria! ü§ù',
  'welcome',
  '{"nome_cliente": "Nome formal do cliente", "nome_empresa": "Nome da empresa"}',
  120,
  150.00,
  'Empresa',
  NOW()
),
(
  '00000000-0000-0000-0000-000000000006'::uuid,
  'Boas-vindas Premium',
  '‚ú® Bem-vindo(a) {nome_cliente}!\n\nVoc√™ agora faz parte do seleto grupo de clientes premium da {nome_empresa}!\n\nBenef√≠cios exclusivos:\nüëë Atendimento VIP\nüíé Descontos especiais\n‚ö° Prioridade nos agendamentos\n\nSeja muito bem-vindo(a)! üåü',
  'welcome',
  '{"nome_cliente": "Nome formal do cliente", "nome_empresa": "Nome da empresa"}',
  120,
  150.00,
  'Empresa',
  NOW()
)
ON CONFLICT (id) DO NOTHING;

-- Criar fun√ß√£o e trigger para registrar mudan√ßas na tabela clients
CREATE OR REPLACE FUNCTION log_client_changes()
RETURNS trigger AS $$
BEGIN
  INSERT INTO client_history (
    client_id,
    user_id,
    changes
  )
  VALUES (
    NEW.id,
    auth.uid(),
    jsonb_build_object(
      'before', to_jsonb(OLD),
      'after', to_jsonb(NEW)
    )
  );

  INSERT INTO logs (
    user_id,
    client_id,
    action
  )
  VALUES (
    auth.uid(),
    NEW.id,
    CASE
      WHEN TG_OP = 'INSERT' THEN 'Cliente cadastrado'
      WHEN TG_OP = 'UPDATE' THEN 'Cliente atualizado'
      ELSE 'Cliente modificado'
    END
  );

  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Recriar trigger para capturar todas as mudan√ßas
DROP TRIGGER IF EXISTS client_changes_trigger ON clients;
CREATE TRIGGER client_changes_trigger
  AFTER INSERT OR UPDATE ON clients
  FOR EACH ROW
  EXECUTE FUNCTION log_client_changes();